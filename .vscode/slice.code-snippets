{
  "Add case snippet": {
    "prefix": "addCase",
    "scope": "typescript",
    "body": [
      "      /* =============== ${1:} =============== */",
      "      .addCase(${1:}.pending, (state) => {",
      "        return state;",
      "      })",
      "      .addCase(${1:}.fulfilled, (state) => {",
      "        return state;",
      "      })",
      "      .addCase(${1:}.rejected, (state) => {",
      "        return state;",
      "      })"
    ],
    "description": "Add case snippet"
  },
  "RTK slice snippet": {
    "scope": "typescript",
    "prefix": "slice",
    "body": [
      "import { createSlice } from '@reduxjs/toolkit';",
      "",
      "// ================ Initial states ================ //",
      "type T${TM_FILENAME_BASE/(^[a-z])/${1:/upcase}/}State = {};",
      "const initialState: T${TM_FILENAME_BASE/(^[a-z])/${1:/upcase}/}State = {};",
      "",
      "// ================ Thunk types ================ //",
      "",
      "// ================ Async thunks ================ //",
      "export const ${1:$TM_FILENAME_BASE}Thunks = {};",
      "",
      "// ================ Slice ================ //",
      "const ${1:$TM_FILENAME_BASE}Slice = createSlice({",
      "  name: '${1:$TM_FILENAME_BASE}',",
      "  initialState,",
      "  reducers: {},",
      "  extraReducers: () => {},",
      "});",
      "",
      "// ================ Actions ================ //",
      "export const ${1:$TM_FILENAME_BASE}Actions = ${1:$TM_FILENAME_BASE}Slice.actions;",
      "export default ${1:$TM_FILENAME_BASE}Slice.reducer;",
      "",
      "// ================ Selectors ================ //",
      ""
    ],
    "description": "Redux toolkit slice snippet"
  }
}
